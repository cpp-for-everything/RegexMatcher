name: Build and Test CMake C++ Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          [
            ubuntu-22.04,
            ubuntu-24.04,
            macos-13,
            macos-14,
            macos-15,
            windows-2019,
            windows-2022,
          ]
        c_compiler: [gcc, clang]
        generator: [Ninja, "Unix Makefiles"]
        include:
          # MSVC is only available on Windows
          - os: windows-2019
            c_compiler: cl
            cxx_compiler: cl
            generator: "Visual Studio 17 2022"
          - os: windows-2022
            c_compiler: cl
            cxx_compiler: cl
            generator: "Visual Studio 17 2022"
          - c_compiler: clang
            cxx_compiler: clang++
          - c_compiler: gcc
            cxx_compiler: g++
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc-12 g++-12 llvm lcov python3

          # Set gcc and g++ version 12 as default
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 60
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 60

      - name: Install dependencies (macOS)
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          brew install llvm ninja python3 cmake

      - name: Install dependencies (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install python --version 3.9.0 -y
          choco install mingw llvm ninja -y

      - name: Configure CMake
        if: ${{ matrix.cxx_compiler == 'cl' }}
        run: |
          cmake -S . -B build -DCODE_COVERAGE=OFF -A x64 -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}

      - name: Configure CMake
        if: ${{ matrix.cxx_compiler != 'cl' }}
        run: |
          cmake -S . -B build -G "${{ matrix.generator }}" -DCODE_COVERAGE=OFF -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}

      - name: Build Project
        id: build_project
        continue-on-error: true
        run: |
          cmake --build build --config Release > compile.log 2>&1

      - name: Run tests
        if: ${{ steps.build_project.outcome == 'success' }}
        run: |
          cmake --build build
          cd build
          ctest -C Release

      - name: Annotate warnings and errors without duplicates
        if: ${{ always() }}
        shell: bash
        run: |
          python3 ./.github/scripts/annotate_warnings.py compile.log > annotations.txt
          python3 ./.github/scripts/annotate_errors.py compile.log >> annotations.txt

      - name: Upload compile artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: "annotations-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.generator }}"
          path: annotations.txt

  gather_annotations:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download annotations artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./

      - name: Filter and print unique annotations
        run: |
          cat ./annotations-*/annotations.txt | sort | uniq

  code_coverage:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, macos-13, macos-14, macos-15]
        c_compiler: [clang]
        generator: [Ninja, "Unix Makefiles"]
        include:
          # MSVC is only available on Windows
          - c_compiler: clang
            cxx_compiler: clang++
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build llvm lcov python3

      - name: Install dependencies (macOS)
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          brew install llvm lcov ninja python3 cmake
          ln -sf "$(xcrun --find llvm-profdata)" /usr/local/bin/llvm-profdata
          ln -sf "$(xcrun --find llvm-cov)" /usr/local/bin/llvm-cov

      - name: Prepare for code coverage
        run: |
          export LLVM_PROFILE_FILE="%p.profraw"
          cmake -B build -G'${{ matrix.generator }}' -DCODE_COVERAGE=ON -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          cmake --build build --target ccov-all-export
          cat ./build/ccov/coverage.json
          echo "Coverage report generated in ./out directory"

      - name: Upload compile artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "coverage-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.generator }}"
          path: ./build/ccov/coverage.json

  code-coverage-summery:
    runs-on: ubuntu-latest
    needs: [code_coverage]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Download artifacts from previous jobs (assuming the artifacts contain coverage-*/coverage.json files)
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-files
      # Combine the coverage reports and post annotations using github-script
      - name: Combine and process coverage reports
        uses: actions/github-script@v7
        with:
          script: |
            const script = require('./.github/scripts/generate_coverage_reports.js')
            console.log(script({github, context}))
